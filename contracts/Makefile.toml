extend = "../Makefile.toml"

[env]
BUILD_TARGET_DIR = "${PROJECT_ROOT}/target"
TARGET_DIR = "${PROJECT_ROOT}/target/enclave"
ENCLAVE_LDS = "${EKIDEN_ROOT}/core/edl/src/enclave.lds"
ENCLAVE_KEY = "${EKIDEN_ROOT}/keys/private.pem"
ENCLAVE_CONFIG = "${EKIDEN_ROOT}/core/edl/src/enclave.xml"
SGX_COMMON_CFLAGS = "-m64"
SGX_LIBRARY_PATH = "${INTEL_SGX_SDK}/lib64"
SGX_ENCLAVE_SIGNER = "${INTEL_SGX_SDK}/bin/x64/sgx_sign"
PARSE_ENCLAVE = "${EKIDEN_ROOT}/scripts/parse_enclave.py"
BUILD_FOR_HOST_TARGET = "false"
BUILD_FOR_SGX_TARGET = "true"

[tasks.post-build]
alias = "contract-post-build"

[tasks.contract-post-build]
dependencies = [
    "contract-link",
    "contract-sign",
]

[tasks.contract-link]
script_runner = "bash"
script = ['''
    # TODO: Should be based on debug/release builds.
    SGX_COMMON_CFLAGS="${SGX_COMMON_CFLAGS} -O2"

    if [ "${SGX_MODE}" == "HW" ]; then
      Trts_Library_Name=sgx_trts
      Service_Library_Name=sgx_tservice
    else
      Trts_Library_Name=sgx_trts_sim
      Service_Library_Name=sgx_tservice_sim
    fi

    Crypto_Library_Name=sgx_tcrypto
    KeyExchange_Library_Name=sgx_tkey_exchange
    ProtectedFs_Library_Name=sgx_tprotected_fs

    mkdir -p ${TARGET_DIR}

    g++ ${SGX_COMMON_CFLAGS} \
      -Wl,--no-undefined -nostdlib -nodefaultlibs -nostartfiles \
      -L${SGX_LIBRARY_PATH} \
      -L${BUILD_TARGET_DIR}/x86_64-unknown-linux-sgx/${BUILD_MODE} \
      -Wl,--whole-archive -l${Trts_Library_Name} -Wl,--no-whole-archive \
      -Wl,--start-group -lsgx_tstdc -lsgx_tstdcxx -l${Crypto_Library_Name} -l${KeyExchange_Library_Name} -l${Service_Library_Name} -l${CARGO_MAKE_CRATE_NAME//-/_} -Wl,--end-group \
      -Wl,-Bstatic -Wl,-Bsymbolic -Wl,--no-undefined \
      -Wl,-pie,-eenclave_entry -Wl,--export-dynamic \
      -Wl,--defsym,__ImageBase=0 \
      -Wl,--require-defined,__ekiden_enclave \
      -Wl,--gc-sections \
      -Wl,--version-script=${ENCLAVE_LDS} \
      -o ${TARGET_DIR}/${CARGO_MAKE_CRATE_NAME}.so
''']

[tasks.contract-sign]
script = ['''
    ${SGX_ENCLAVE_SIGNER} sign \
      -key ${ENCLAVE_KEY} \
      -enclave ${TARGET_DIR}/${CARGO_MAKE_CRATE_NAME}.so \
      -out ${TARGET_DIR}/${CARGO_MAKE_CRATE_NAME}.signed.so \
      -config ${ENCLAVE_CONFIG}

    ${PARSE_ENCLAVE} \
      ${TARGET_DIR}/${CARGO_MAKE_CRATE_NAME}.signed.so 2>/dev/null \
      | grep ENCLAVEHASH | cut -f2 \
      > ${TARGET_DIR}/${CARGO_MAKE_CRATE_NAME}.mrenclave
''']
