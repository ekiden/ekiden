enclave {
    include "sgx_report.h"
    include "sgx_tseal.h"

    trusted {
        /**
         * Generate an identity for a new enclave persistence and export it in a sealed form. Does not start using
         * that identity. Call `identity_restore` to start using it.
         */
        // TODO: work out constant size
        public void identity_create(
            [out, size=sealed_identity_capacity] sgx_sealed_data_t *sealed_identity,
            size_t sealed_identity_capacity,
            [out] size_t *sealed_identity_length
        );

        /**
         * Populate the enclave launch with an identity. The enclave launch must not have already restored an identity.
         * Gives the public identity string back. The enclave launch caches the identity in ephemeral enclave memory
         * so that we don't have to pass the sealed ID and unseal it for every entry. The enclave launch caches the
         * identity in ephemeral enclave memory so that we don't have to pass the sealed ID and unseal it for every
         * entry.
         */
        // TODO: work out constant size
        public void identity_restore(
            [in, size=sealed_identity_length] const sgx_sealed_data_t *sealed_identity,
            size_t sealed_identity_length,
            [out, size=public_identity_capacity] uint8_t *public_identity,
            size_t public_identity_capacity,
            [out] size_t *public_identity_length
        );

        /**
         * Create a report for use in the enclave identity proof. Data is specified in /docs/enclave-identity.md.
         */
        public void identity_create_report(
            [in] const sgx_target_info_t *target_info,
            [out] sgx_report_t *report
        );

        /**
         * Populate the enclave launch with an attestation verification report. The enclave launch caches the AVR for
         * internal use, for example, if it needs its own enclave identity proof.
         */
        public void identity_set_av_report(
            [in, size=av_report_length] const uint8_t *av_report,
            size_t av_report_length
        );
    };
};
