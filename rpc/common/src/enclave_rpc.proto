syntax = "proto3";

package enclave_rpc;

// Cryptographic box (encrypted and authenticated).
message CryptoBox {
    // Nonce.
    bytes nonce = 1;
    // Encrypted and authenticated payload.
    bytes payload = 2;
    // Optional originator public key.
    bytes public_key = 3;
}

message PlainClientRequest {
    // Request method.
    string method = 1;
    // Payload (must be valid Protocol Buffers, based on given method).
    bytes payload = 2;
}

message ClientRequest {
    oneof request {
        // Plain-text request.
        PlainClientRequest plain_request = 1;
        // Encrypted request.
        CryptoBox encrypted_request = 2;
    }
}

message EnclaveRequest {
    // The part that comes from a client.
    repeated ClientRequest client_request = 1;
}

message Error {
    // Error message.
    string message = 1;
}

message PlainClientResponse {
    enum Code {
        INVALID = 0;

        // 2xx indicades success.
        SUCCESS = 200;

        // 4xx indicates errors.
        ERROR = 400;
        ERROR_BAD_REQUEST = 401;
        ERROR_METHOD_NOT_FOUND = 402;
        ERROR_SECURE_CHANNEL = 403;
        ERROR_METHOD_SECURE = 404;
    }
    // Response code.
    Code code = 1;
    // Payload (must be valid Protocol Buffers, based on given method).
    bytes payload = 2;
}

message ClientResponse {
    oneof response {
        // Encrypted response.
        CryptoBox encrypted_response = 1;
        // Plain-text response.
        PlainClientResponse plain_response = 2;
    }
}

message EnclaveResponse {
    // The part that goes to a client.
    repeated ClientResponse client_response = 1;
}

// Meta methods.
message ContractInitRequest {
}

message ContractInitResponse {
    // Public key used to establish a secure channel with the enclave. This
    // key is generated as part of the contract initialization process.
    bytes public_key = 1;
    // Sealed keys that should be persisted to the filesystem and used in
    // next enclave invocation.
    bytes sealed_keys = 2;
    // MRENCLAVE of the running contract. This is only used for convenience
    // to display it in the compute node when starting the contract.
    bytes mr_enclave = 3;
}

message ContractRestoreRequest {
    // Sealed keys if this enclave has previously been initialized.
    bytes sealed_keys = 1;
}

message ContractRestoreResponse {
    // Public key used to establish a secure channel with the enclave. This
    // key is generated as part of the contract initialization process.
    bytes public_key = 1;
}

message AttestationReport {
    // Raw report body (must be raw as the signature is computed over it). The body
    // is JSON-encoded as per the IAS API specification.
    bytes body = 1;
    // Report signature.
    bytes signature = 2;
    // Report signing certificate chain in PEM format.
    bytes certificates = 3;
}

message ChannelInitRequest {
    // 32-byte client short-term public key.
    bytes short_term_public_key = 1;
    // Optional client attestation report.
    AttestationReport client_attestation_report = 2;
}

message ChannelInitResponseBox {
    // Server short-term public key.
    bytes short_term_public_key = 1;
}

message ChannelInitResponse {
    // Contract attestation report.
    AttestationReport contract_attestation_report = 1;
    // Encrypted ChannelInitResponseBox message.
    CryptoBox response_box = 2;
}

message ChannelCloseRequest {
}

message ChannelCloseResponse {
}
