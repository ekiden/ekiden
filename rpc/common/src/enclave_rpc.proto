syntax = "proto3";

package enclave_rpc;

import "enclave_identity.proto";

// Cryptographic box (encrypted and authenticated).
message CryptoBox {
    // Nonce.
    bytes nonce = 1;
    // Encrypted and authenticated payload.
    bytes payload = 2;
    // Optional originator public key.
    bytes public_key = 3;
}

message PlainClientRequest {
    // Request method.
    string method = 1;
    // Payload (must be valid Protocol Buffers, based on given method).
    bytes payload = 2;
}

message ClientRequest {
    oneof request {
        // Plain-text request.
        PlainClientRequest plain_request = 1;
        // Encrypted request.
        CryptoBox encrypted_request = 2;
    }
}

message EnclaveRequest {
    // The part that comes from a client.
    repeated ClientRequest client_request = 1;
}

message Error {
    // Error message.
    string message = 1;
}

message PlainClientResponse {
    enum Code {
        INVALID = 0;

        // 2xx indicades success.
        SUCCESS = 200;

        // 4xx indicates errors.
        ERROR = 400;
        ERROR_BAD_REQUEST = 401;
        ERROR_METHOD_NOT_FOUND = 402;
        ERROR_SECURE_CHANNEL = 403;
        ERROR_METHOD_SECURE = 404;
    }
    // Response code.
    Code code = 1;
    // Payload (must be valid Protocol Buffers, based on given method).
    bytes payload = 2;
}

message ClientResponse {
    oneof response {
        // Encrypted response.
        CryptoBox encrypted_response = 1;
        // Plain-text response.
        PlainClientResponse plain_response = 2;
    }
}

message EnclaveResponse {
    // The part that goes to a client.
    repeated ClientResponse client_response = 1;
}

// Meta methods.

// Channel handshake (see issue #319)

message AuthenticatedShortTermPublicKey {
    // Sender's enclave identity proof.
    enclave_identity.IdentityProof identity_proof = 1;
    // Boxed 32-byte short-term public key.
    CryptoBox boxed_short_term_public_key = 2;
}

// (C')
message ChannelInitRequest {
    // 32-byte client short-term public key.
    bytes short_term_public_key = 1;
}

// (AE, Box[E'](E->C'))
message ChannelInitResponse {
    // Authenticated contract short-term public key.
    // E->C' NONCE_CONTEXT_INIT without optional public key.
    AuthenticatedShortTermPublicKey authenticated_short_term_public_key = 1;
}

// Optional (C', Box[AC, Box[C'](C->E)](C'->E'))
message ChannelAuthRequest {
    // Boxed authenticated client short-term private key.
    // inner: C->E NONCE_CONTEXT_AUTHIN without optional public key.
    // outer: C'->E' NONCE_CONTEXT_AUTHOUT with optional public key,
    CryptoBox boxed_authenticated_short_term_public_key = 1;
}

message ChannelAuthResponse {
}

message ChannelCloseRequest {
}

message ChannelCloseResponse {
}
