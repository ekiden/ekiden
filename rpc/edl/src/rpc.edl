enclave {
    include "sgx_report.h"
    include "sgx_quote.h"

    trusted {
        // RPC initialization ECALL.
        public void rpc_init();

        // Incoming RPC call interface (client -> enclave).
        public void rpc_call(
            [in, size=request_length] const uint8_t *request_data,
            size_t request_length,
            [user_check] uint8_t *response_data,
            size_t response_capacity,
            [out] size_t *response_length
        );
    };

    untrusted {
        sgx_status_t untrusted_init_quote(
            [out] sgx_target_info_t *p_target_info,
            [out] sgx_epid_group_id_t *p_gid
        );

        sgx_status_t untrusted_get_quote(
            [in] const sgx_report_t *p_report,
            sgx_quote_sign_type_t quote_type,
            [in] const sgx_spid_t *p_spid,
            [out, size=quote_capacity] uint8_t *p_quote,
            uint32_t quote_capacity,
            [out] uint32_t *quote_size
        );

        // Outgoing RPC call interface (enclave -> {enclave, service}).
        void untrusted_rpc_call(
            uint16_t endpoint,
            [in, size=request_length] const uint8_t *request_data,
            size_t request_length,
            [out, size=response_capacity] uint8_t *response_data,
            size_t response_capacity,
            [out] size_t *response_length
        );
    };
};
